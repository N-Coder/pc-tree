From cc9a06b0f25ab632ecd07d66a723d419ec33b205 Mon Sep 17 00:00:00 2001
From: Simon Dominik Niko Fink <simon.fink@uni-passau.de>
Date: Sun, 27 Feb 2022 10:55:05 +0100
Subject: [PATCH 5/8] manual changes to bivocPQ

---
 libraries/bivocPQ/pqnode.h | 13 ++++--
 libraries/bivocPQ/pqtree.h | 82 ++++++++++++++++++++++++++++++++------
 2 files changed, 79 insertions(+), 16 deletions(-)

diff --git a/libraries/bivocPQ/pqnode.h b/libraries/bivocPQ/pqnode.h
index 5de5c4c..36cd3de 100644
--- a/libraries/bivocPQ/pqnode.h
+++ b/libraries/bivocPQ/pqnode.h
@@ -25,8 +25,7 @@
  *   Some of the comments and variable names are verbatim from the Booth   *
  *   and Lueker paper where this algorithm was first described.            *
  ***************************************************************************/
-#ifndef PQNODE_H
-#define PQNODE_H
+#pragma once
 
 /**
 Internal class used by pqtree to represent individual nodes in the pqtree.
@@ -34,12 +33,16 @@ Internal class used by pqtree to represent individual nodes in the pqtree.
 @author Virginia Tech
 */
 
+#include <csignal>
 #include <list>
 #include <map>
 #include <set>
 #include <vector>
+
 using namespace std;
 
+namespace bivoc {
+
 //declaration of enum types that can be used
 enum pqnode_types { leaf,
                     pnode,
@@ -161,7 +164,6 @@ public:
     void print(int numtabs = 0);
 };
 
-#endif
 
 //Due to the peculiar nature of templates, the implementation
 //details must also be included in the header file, hence the functions
@@ -305,6 +307,10 @@ const pqnode<T> &pqnode<T>::operator=(const pqnode<T> &toCopy) {
 //if last pointer is null, will return the first sibling
 template<class T>
 pqnode<T> *pqnode<T>::qNextChild(pqnode<T> *last) {
+    if (immediate_siblings.empty()) {
+        raise(SIGUSR1);
+    }
+
     if (*(immediate_siblings.begin()) == last) {
         if (immediate_siblings.size() == 1)
             return NULL;
@@ -523,3 +529,4 @@ void pqnode<T>::print(int numtabs) {
         }
     }
 }
+}
diff --git a/libraries/bivocPQ/pqtree.h b/libraries/bivocPQ/pqtree.h
index ac9af6b..8e68b03 100644
--- a/libraries/bivocPQ/pqtree.h
+++ b/libraries/bivocPQ/pqtree.h
@@ -23,7 +23,9 @@ PQ-Tree class based on the paper entitled "Testing for the Consecutive Onces Pro
 
 @author Virginia Tech
 */
+#pragma once
 
+#include "bigInt/bigint.h"
 #include "pqnode.h"
 #include "setTemplates.h"
 #include <list>
@@ -31,11 +33,11 @@ PQ-Tree class based on the paper entitled "Testing for the Consecutive Onces Pro
 #include <queue>
 #include <set>
 #include <vector>
-using namespace std;
 
-#ifndef PQTREE_H
-#define PQTREE_H
+using namespace std;
 
+namespace bivoc {
+using namespace Dodecahedron;
 //variable to initiate debugging output
 //simply leave this false
 bool debugOut = false;
@@ -64,7 +66,7 @@ private:
     //to fix, you can create an array of items so that each item hashes
     //to its leaf address in constant time, but this is a tradeoff to
     //conserve space
-    map<T, pqnode<T> *> leafAddress;
+    std::vector<pqnode<T> *> leafAddress;
 
     //a reference to a pseudonode that cannot be reached through the root
     //of the tree.  The pseudonode is a temporary node designed to handle
@@ -150,9 +152,12 @@ public:
 
     //returns the set of all elements on which a reduction was performed with
     set<T> getContained();
+
+    Bigint possibleOrders();
+
+    void cleanUp();
 };
 
-#endif
 
 //copy constructor
 template<class T>
@@ -164,6 +169,7 @@ pqtree<T>::pqtree(const pqtree<T> &toCopy) {
     invalid = toCopy.invalid;
     reductions = toCopy.reductions;
     pseudonode = NULL;
+    leafAddress.reserve(toCopy.leafAddress.capacity());
     leafAddress.clear();
     root->findLeaves(leafAddress);
 }
@@ -181,6 +187,7 @@ const pqtree<T> &pqtree<T>::operator=(const pqtree &toCopy) {
     off_the_top = toCopy.off_the_top;
     reductions = toCopy.reductions;
     leafAddress.clear();
+    leafAddress.reserve(toCopy.leafAddress.capacity());
     root->findLeaves(leafAddress);
 
     return this;
@@ -1105,15 +1112,17 @@ bool pqtree<T>::bubble(set<T> S) {
                 pseudonode->pertinent_leaf_count += (*i)->pertinent_leaf_count;
                 int count = 0;//count number of immediate siblings
                 int loop = 0;
-                for (typename set<pqnode<T> *>::iterator j = (*i)->immediate_siblings.begin(); j != (*i)->immediate_siblings.end() && loop < 2; j++) {
+                for (typename set<pqnode<T> *>::iterator j = (*i)->immediate_siblings.begin(); j != (*i)->immediate_siblings.end() && loop < 2;) {
                     loop++;
 
-                    if ((*j)->mark == blocked)
+                    auto jEl = *j;
+                    ++j;
+                    if (jEl->mark == blocked)
                         count++;
                     else {
-                        (*i)->immediate_siblings.erase(*j);
-                        (*j)->immediate_siblings.erase(*i);
-                        pseudonode->pseudo_neighbors[side] = *j;
+                        (*i)->immediate_siblings.erase(std::prev(j));
+                        jEl->immediate_siblings.erase(*i);
+                        pseudonode->pseudo_neighbors[side] = jEl;
                     }
                 }
                 (*i)->parent = pseudonode;
@@ -1237,6 +1246,7 @@ void pqtree<T>::cleanPseudo() {
 //basic constructor from an initial set
 template<class T>
 pqtree<T>::pqtree(set<T> S) {
+    leafAddress.reserve((*S.end()) + 1);
     //set up the root node as a P-Node initially
     root = new pqnode<T>;
     root->type = pnode;
@@ -1326,9 +1336,6 @@ bool pqtree<T>::reduce(set<T> S) {
         pseudonode = NULL;
     }
 
-    //reset all the temporary variables for the next round
-    root->reset();
-
     //store the reduction set for later lookup
     reductions.push_back(S);
 
@@ -1336,6 +1343,12 @@ bool pqtree<T>::reduce(set<T> S) {
     return true;
 }
 
+template<class T>
+void pqtree<T>::cleanUp() {
+    //reset all the temporary variables for the next round
+    root->reset();
+}
+
 template<class T>
 bool pqtree<T>::reduceAll(list<set<T>> L) {
     if (debugOut)
@@ -1421,3 +1434,46 @@ pqtree<T>::~pqtree() {
     delete root;
     //delete pseudonode;
 }
+
+template<class T>
+Bigint pqtree<T>::possibleOrders() {
+    Bigint orders(1);
+
+    std::queue<pqnode<T> *> queue;
+
+    queue.push(root);
+
+    while (!queue.empty()) {
+        pqnode<T> *nextNode = queue.front();
+        queue.pop();
+
+        if (nextNode->type == pqnode_types::pnode) {
+            int childCount = nextNode == root ? nextNode->child_count() - 1 : nextNode->child_count();
+            orders *= factorial(childCount);
+            for (pqnode<T> *child : nextNode->circular_link) {
+                if (child->type != pqnode_types::leaf) {
+                    queue.push(child);
+                }
+            }
+        } else if (nextNode->type == pqnode_types::qnode) {
+            orders *= 2;
+
+            pqnode<T> *nextChild = nextNode->endmost_children[0];
+            pqnode<T> *previousChild = nullptr;
+
+
+            while (nextChild != nullptr) {
+                if (nextChild->type != pqnode_types::leaf) {
+                    queue.push(nextChild);
+                }
+                pqnode<T> *tmp = nextChild;
+                nextChild = nextChild->qNextChild(previousChild);
+                previousChild = tmp;
+            }
+        }
+    }
+
+    return orders;
+}
+
+}
-- 
2.35.1

