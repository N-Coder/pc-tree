From 21af2b3d8e5daf8496c19d8131f82b8d80b414ac Mon Sep 17 00:00:00 2001
From: Simon Dominik Niko Fink <simon.fink@uni-passau.de>
Date: Sun, 27 Feb 2022 10:54:46 +0100
Subject: [PATCH 4/8] manual changes to sagemath

---
 evaluation/sagemath/pq_trees.py | 40 ++++++++++++++++++++++-----------
 1 file changed, 27 insertions(+), 13 deletions(-)

diff --git a/evaluation/sagemath/pq_trees.py b/evaluation/sagemath/pq_trees.py
index 5b435c4..66d7d72 100644
--- a/evaluation/sagemath/pq_trees.py
+++ b/evaluation/sagemath/pq_trees.py
@@ -213,15 +213,16 @@ class PQ:
             sage: Graph('GvGNp?').is_interval()
             False
         """
-        from sage.sets.set import Set
+        # from sage.sets.set import Set
 
         self._children = []
         for e in seq:
             if isinstance(e, list):
-                e = Set(e)
+                e = set(e)
 
             if not e in self._children:
                 self._children.append(e)
+        self.flatten()
 
     def reverse(self):
         r"""
@@ -277,8 +278,7 @@ class PQ:
             {2, 3}
             ('P', [{2, 4}, {8, 2}, {9, 2}])
         """
-        for i in self._children:
-            yield i
+        return iter(self._children)
 
     def number_of_children(self):
         r"""
@@ -430,11 +430,20 @@ class PQ:
             sage: p.flatten()
             ('P', [{2, 4}, {8, 2}, {9, 2}])
         """
-        if self.number_of_children() == 1:
-            return flatten(self._children[0])
-        else:
-            self._children = [flatten(x) for x in self._children]
-            return self
+        for i, x in enumerate(self):
+            if not isinstance(x, (P, Q)):
+                continue
+            if x.number_of_children() == 1:
+                self._children[i] = x = x._children[0]
+                if not isinstance(x, (P, Q)):
+                    continue
+            x.flatten()
+        return self
+
+    def flatten_children(self):
+        for i, x in enumerate(self):
+            if isinstance(x, (P, Q)) and x.number_of_children() == 1:
+                self._children[i] = x._children[0]
 
 class P(PQ):
     r"""
@@ -509,9 +518,10 @@ class P(PQ):
         # code slightly more readable :-)                             #
         ###############################################################
 
+        if self.number_of_children() == 1:
+            return self._children[0].set_contiguous(v)
         seq = [set_contiguous(x, v) for x in self]
-        self.flatten()
-        seq = [set_contiguous(x, v) for x in self]
+        self.flatten_children()
 
         f_seq = dict(zip(self, seq))
 
@@ -624,6 +634,7 @@ class P(PQ):
                 # We lock all of them in a Q-tree
 
                 self._children.append(new_Q(new))
+                self.flatten_children()
 
                 return PARTIAL, True
 
@@ -658,6 +669,7 @@ class P(PQ):
 
                 # We add all of it, locked in a Q-Tree
                 self._children.append(new_Q(new))
+                self.flatten_children()
 
                 return PARTIAL, False
 
@@ -794,9 +806,10 @@ class Q(PQ):
         # code slightly more readable :-)                             #
         ###############################################################
 
+        if self.number_of_children() == 1:
+            return self._children[0].set_contiguous(v)
         seq = [set_contiguous(x, v) for x in self]
-        self.flatten()
-        seq = [set_contiguous(x, v) for x in self]
+        self.flatten_children()
 
         f_seq = dict(zip(self, seq))
 
@@ -989,6 +1002,7 @@ class Q(PQ):
 
             # Setting the updated sequence of children
             self._children = new_children
+            self.flatten_children()
 
 
             # Whether we achieved an alignment to the right is the
-- 
2.35.1

