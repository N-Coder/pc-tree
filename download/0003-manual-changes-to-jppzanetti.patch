From 022d48a6181e68645cec24f2b6f722acd67482d0 Mon Sep 17 00:00:00 2001
From: Simon Dominik Niko Fink <simon.fink@uni-passau.de>
Date: Sun, 27 Feb 2022 12:19:12 +0100
Subject: [PATCH 3/8] manual changes to jppzanetti

---
 .../java/java_evaluation/jppzanetti/Leaf.java |   9 +-
 .../java/java_evaluation/jppzanetti/Node.java |  10 +-
 .../java_evaluation/jppzanetti/PQRNode.java   | 124 ++++++-
 .../java_evaluation/jppzanetti/PQRTree.java   | 331 ++++++++++++++++--
 4 files changed, 439 insertions(+), 35 deletions(-)

diff --git a/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/Leaf.java b/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/Leaf.java
index 60331f9..ae3324f 100644
--- a/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/Leaf.java
+++ b/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/Leaf.java
@@ -1,11 +1,13 @@
 package java_evaluation.jppzanetti;
 
+import java.math.BigInteger;
+
 class Leaf extends Node {
 
     /**
      * A number that servers as the label of the leaf.
      */
-    private final int value;
+    final int value;
 
     /**
      * Initializes a new leaf.
@@ -31,4 +33,9 @@ class Leaf extends Node {
     boolean areAllChildrenBlack() {
         return true;
     }
+
+    @Override
+    public BigInteger getPossibleOrders(boolean root) {
+        return BigInteger.ONE;
+    }
 }
diff --git a/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/Node.java b/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/Node.java
index 6f1ff4f..a874a8e 100644
--- a/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/Node.java
+++ b/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/Node.java
@@ -1,5 +1,7 @@
 package java_evaluation.jppzanetti;
 
+import java.math.BigInteger;
+
 abstract class Node {
 
     /**
@@ -12,18 +14,18 @@ abstract class Node {
      * if this node is the representative node among all its siblings in
      * the union-find structure.
      */
-    private PQRNode parent;
+    PQRNode parent;
     /**
      * If this is a non-representative child of a Q/R-node, 
      * points to a sibling node above it in the union-find tree.
      * Otherwise, points to itself.
      */
-    private Node representant;
+    protected Node representant;
     /**
      * Rank of the node in the union-find tree. It is zero if the node is not
      * part of a union-find structure.
      */
-    private int rank;
+    int rank;
 
     /**
      * Holds the two immediate siblings of this node. This forms a symmetric 
@@ -166,4 +168,6 @@ abstract class Node {
     void setPertinentLeafCount(int n) {
         this.pertinentLeafCount = n;
     }
+
+    public abstract BigInteger getPossibleOrders(boolean root);
 }
diff --git a/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/PQRNode.java b/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/PQRNode.java
index 9bbcb35..e94f337 100644
--- a/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/PQRNode.java
+++ b/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/PQRNode.java
@@ -1,22 +1,24 @@
 package java_evaluation.jppzanetti;
 
+import java.math.BigInteger;
+import java.util.Iterator;
 import java.util.LinkedList;
 
-class PQRNode extends Node {
+class PQRNode extends Node implements Iterable<Node> {
 
     /**
      * The first child of the node.
      */
-    private Node firstChild;
+    Node firstChild;
     /**
      * The last child of the node.
      */
-    private Node lastChild;
+    Node lastChild;
     /**
      * The child that is the representant of the union-find structure of 
      * this node's children. It is only set if this node has type Q or R.
      */
-    private Node representativeChild;
+    Node representativeChild;
     /**
      * Number of children of the node.
      */
@@ -37,11 +39,11 @@ class PQRNode extends Node {
     /**
      * A list that stores the gray children of the node.
      */
-    private final LinkedList<Node> grayChildren;
+    final LinkedList<Node> grayChildren;
     /**
      * A list that stores the black children of the node.
      */
-    private final LinkedList<Node> blackChildren;
+    final LinkedList<Node> blackChildren;
 
     PQRNode(PQRType type) {
         super();
@@ -420,7 +422,7 @@ class PQRNode extends Node {
         return this.lastChild;
     }
 
-    void mergeIntoLCA() {
+    boolean mergeIntoLCA() {
         PQRNode r = this.getParent();
 
         // Union
@@ -511,6 +513,7 @@ class PQRNode extends Node {
         // Set type R if necessary
         if ((this.type == PQRType.R) && (r.getType() == PQRType.Q)) {
             r.setType(PQRType.R);
+            return false;
         }
 
         // Update LCA child count and colored children lists
@@ -522,6 +525,7 @@ class PQRNode extends Node {
         this.sibling[0] = null;
         this.sibling[1] = null;
         this.destroy();
+        return true;
     }
 
     void mergePNode() {
@@ -584,22 +588,23 @@ class PQRNode extends Node {
      * after repairing all gray children. *
      **************************************
      */
-    void adjust() {
+    boolean adjust() {
         switch (this.type) {
             case P:
                 this.joinBlackChildren();
                 break;
 
             case Q:
-                this.adjustQ();
+                if (!this.adjustQ()) return false;
                 break;
 
             default:
                 break;
         }
+        return true;
     }
 
-    private void adjustQ() {
+    private boolean adjustQ() {
         int whiteCount = 0;
         for (Node b : this.blackChildren) {
             if ((b.sibling[0] == null) || (b.sibling[0].getColor() == Color.WHITE)) {
@@ -612,6 +617,9 @@ class PQRNode extends Node {
 
         if (whiteCount > 2) {
             this.type = PQRType.R;
+            return false;
+        } else {
+            return true;
         }
     }
 
@@ -699,4 +707,100 @@ class PQRNode extends Node {
     boolean areAllChildrenBlack() {
         return (this.blackChildren.size() == this.getChildCount());
     }
+
+    public void replaceChild(Node oldChild, Node newChild) {
+        if (type == PQRType.Q) {
+            boolean first = oldChild == firstChild;
+            boolean last = oldChild == lastChild;
+            Node sib0 = oldChild.sibling[0];
+            Node sib1 = oldChild.sibling[1];
+            removeChild(oldChild);
+
+            if (first) {
+                insertBeginning(newChild);
+            } else if (last) {
+                insertEnd(newChild);
+            } else {
+                insertBetween(newChild, sib0, sib1);
+            }
+        } else {
+            removeChild(oldChild);
+            insertChild(newChild);
+        }
+    }
+
+    @Override
+    public BigInteger getPossibleOrders(boolean root) {
+        BigInteger orders = BigInteger.ONE;
+        switch (type) {
+            case P:
+                int num = root ? getChildCount() - 1 : getChildCount();
+                for (int i = 2; i <= num; i++) {
+                    orders = orders.multiply(BigInteger.valueOf(i));
+                }
+                break;
+            case Q:
+                orders = orders.multiply(BigInteger.valueOf(2));
+                break;
+            case R:
+                return BigInteger.ZERO;
+            default:
+                break;
+        }
+
+
+        Node child = firstChild;
+        Node prevChild = null;
+        int nextChild;
+        while (child != null) {
+            orders = orders.multiply(child.getPossibleOrders(false));
+
+            // Get next child
+            if (child.sibling[0] == prevChild) {
+                nextChild = 1;
+            } else {
+                nextChild = 0;
+            }
+            prevChild = child;
+            child = child.sibling[nextChild];
+        }
+
+        return orders;
+    }
+
+    static class ChildIterator implements Iterator<Node> {
+        private Node pred;
+        private Node next;
+
+        public ChildIterator(Node next) {
+            this.pred = null;
+            this.next = next;
+        }
+
+        @Override
+        public boolean hasNext() {
+            return next != null;
+        }
+
+        @Override
+        public Node next() {
+            if (pred == next.sibling[0]) {
+                pred = next;
+                next = pred.sibling[1];
+            } else if (pred == next.sibling[1]) {
+                pred = next;
+                next = pred.sibling[0];
+            }
+            return pred;
+        }
+    }
+
+    @Override
+    public Iterator<Node> iterator() {
+        if (firstChild.sibling[0] != null && firstChild.sibling[1] != null ||
+            lastChild.sibling[0] != null && lastChild.sibling[1] != null) {
+            throw new AssertionError("Tree has invalid state. Aborting.");
+        }
+        return new ChildIterator(firstChild);
+    }
 }
diff --git a/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/PQRTree.java b/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/PQRTree.java
index 9cfcb34..1a862af 100644
--- a/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/PQRTree.java
+++ b/evaluation/javaEvaluation/src/main/java/java_evaluation/jppzanetti/PQRTree.java
@@ -1,6 +1,7 @@
 package java_evaluation.jppzanetti;
 
-import java.util.LinkedList;
+import java.math.BigInteger;
+import java.util.*;
 
 /**
  * The main class for solving the Consecutive Ones Problem (C1P). Builds and
@@ -25,7 +26,7 @@ public class PQRTree {
     /**
      * An array of all the leaves.
      */
-    private Leaf[] leaf;
+    private final ArrayList<Leaf> leaf;
 
     /**
      * A list to hold all nodes that are visited during the reduction process.
@@ -40,19 +41,17 @@ public class PQRTree {
     public PQRTree(int n) {
         super();
 
-        this.root = null;
-        this.leaf = null;
-
         // Create root
         this.root = new PQRNode(PQRType.P);
 
         // Create the leaf list
-        this.leaf = new Leaf[n];
+        this.leaf = new ArrayList<>(n);
 
         // Create and insert leaves
         for (int i = 0; i < n; i++) {
-            this.leaf[i] = new Leaf(i);
-            this.root.insertEnd(this.leaf[i]);
+            this.leaf.add(i, new Leaf(i));
+            this.root.insertEnd(leaf.get(i));
+            assert this.leaf.get(i).value == i;
         }
 
         this.visitedNodes = new LinkedList<>();
@@ -63,15 +62,17 @@ public class PQRTree {
      * 
      * @param c An array of integers that must be consecutive.
      */
-    public void reduce(int[] c) {
+    public boolean reduce(int[] c) {
         if (c.length < 2) {
-            return;
+            return true;
         }
 
         PQRNode r = this.bubble(c);
         r = this.repairGray(r);
-        r.adjust();
+        if (r == null) return false;
+        if (!r.adjust()) return false;
         this.uncolor(c);
+        return true;
     }
 
     /**
@@ -88,8 +89,9 @@ public class PQRTree {
 
         // First phase: count the pertinent children of each node
         for (int i : c) {
-            this.leaf[i].visit();
-            queue.add(this.leaf[i]);
+            assert this.leaf.get(i).value == i;
+            this.leaf.get(i).visit();
+            queue.add(this.leaf.get(i));
         }
         while (queue.size() + offTheTop > 1) {
             Node v = queue.poll();
@@ -110,8 +112,8 @@ public class PQRTree {
         // Second phase: color the nodes and find the LCA
         queue.clear();
         for (int i : c) {
-            this.leaf[i].setPertinentLeafCount(1);
-            queue.add(this.leaf[i]);
+            this.leaf.get(i).setPertinentLeafCount(1);
+            queue.add(this.leaf.get(i));
         }
         while (!queue.isEmpty()) {
             Node v = queue.poll();
@@ -133,8 +135,8 @@ public class PQRTree {
                 queue.add(p);
             }
         }
-
-        return null;
+        throw new AssertionError();
+        //		return null;
     }
 
     /**
@@ -170,7 +172,7 @@ public class PQRTree {
                     v.mergePNode();
                 } else {
                     // Merge into the LCA
-                    v.mergeIntoLCA();
+                    if (!v.mergeIntoLCA()) return null;
                 }
             }
             v = newLCA.getGrayChild();
@@ -184,11 +186,11 @@ public class PQRTree {
      * 
      * @param c The constraint just added.
      */
-    private void uncolor(int[] c) {
+    protected void uncolor(int[] c) {
         for (int i : c) {
-            this.leaf[i].cleanUp();
+            this.leaf.get(i).cleanUp();
 
-            PQRNode p = this.leaf[i].getParent();
+            PQRNode p = this.leaf.get(i).getParent();
             if ((p != null) && (p.isVisited())) {
                 p.cleanUp();
                 this.visitedNodes.add(p);
@@ -228,4 +230,291 @@ public class PQRTree {
     public String toString() {
         return root.toString();
     }
+
+    public String uniqueID() {
+        return uniqueID(true, true);
+    }
+
+    public Node getNeighbor(Node node, Node neighbor) {
+        if (neighbor instanceof Leaf || neighbor == null) {
+            return neighbor;
+        }
+
+        PQRNode n = (PQRNode) neighbor;
+        int deg = n.getChildCount();
+        if (n != root)
+            deg++;
+
+
+        if (deg != 2) {
+            return neighbor;
+        } else {
+            List<Node> neighbors = new LinkedList<>();
+            n.iterator().forEachRemaining(neighbors::add);
+            if (n != root)
+                neighbors.add(n.getParent());
+            assert neighbors.size() == 2;
+
+            if (neighbors.get(0) == node) {
+                return getNeighbor(neighbor, neighbors.get(1));
+            } else {
+                assert neighbors.get(1) == node;
+                return getNeighbor(neighbor, neighbors.get(0));
+            }
+        }
+    }
+
+    public String uniqueID(boolean normalizeLeafIDs, boolean includeInnerNodeOrder) {
+        if (root == null) {
+            return "empty";
+        }
+        StringBuilder sb = new StringBuilder();
+
+        List<Node> labelingQueue = new LinkedList<>(leaf);
+        labelingQueue.sort(Comparator.comparingInt(a -> a == null ? Integer.MAX_VALUE : ((Leaf) a).value));
+        while (labelingQueue.get(labelingQueue.size() - 1) == null)
+            labelingQueue.remove(labelingQueue.size() - 1);
+        Leaf lastLeaf = (Leaf) labelingQueue.get(labelingQueue.size() - 1);
+
+        List<Node> fullNodeOrder = new LinkedList<>();
+        HashMap<Node, Integer> order = new HashMap<>();
+        HashMap<Node, Integer> fullNeighborCount = new HashMap<>();
+        while (!labelingQueue.isEmpty()) {
+            Node node = labelingQueue.remove(0);
+            Node parent = getNeighbor(node, node.getParent());
+
+            order.put(node, fullNodeOrder.size());
+            fullNodeOrder.add(node);
+
+            if (node == lastLeaf) continue;
+
+            if (node == root || parent == null || order.containsKey(parent)) {
+                parent = null;
+                for (Node curr : (PQRNode) node) {
+                    if (!order.containsKey(curr)) {
+                        parent = (PQRNode) curr;
+                        break;
+                    }
+                }
+                if (parent == null) {
+                    assert labelingQueue.isEmpty();
+                    continue;
+                }
+            }
+            assert parent != null;
+            assert !order.containsKey(parent);
+
+            fullNeighborCount.put(parent, fullNeighborCount.getOrDefault(parent, 0) + 1);
+            int pDeg = parent instanceof Leaf ? 1 : ((PQRNode) parent).getChildCount();
+            if (parent != root) pDeg++;
+            if (fullNeighborCount.get(parent) == pDeg - 1) {
+                labelingQueue.add(parent);
+            } else {
+                assert fullNeighborCount.get(parent) < pDeg - 1;
+            }
+        }
+
+        List<Object> stack = new LinkedList<>();
+        stack.add(fullNodeOrder.get(fullNodeOrder.size() - 1));
+        while (!stack.isEmpty()) {
+            Object next = stack.remove(stack.size() - 1);
+            if (next instanceof String) {
+                sb.append(next);
+                continue;
+            } else if (next instanceof Leaf) {
+                if (normalizeLeafIDs)
+                    sb.append(order.get(next));
+                else
+                    sb.append(((Leaf) next).value);
+                continue;
+            }
+
+            PQRNode node = (PQRNode) next;
+            List<Node> children = new LinkedList<>();
+            node.iterator().forEachRemaining(child -> children.add(getNeighbor(node, child)));
+            assert children.size() == node.getChildCount();
+            if (node != root)
+                children.add(getNeighbor(node, node.getParent()));
+            int degree = children.size();
+
+            PQRNode informedNeighbor = null;
+            if (node != fullNodeOrder.get(fullNodeOrder.size() - 1)) {
+                for (int j = 0; order.get(children.get(0)) < order.get(node); j++) {
+                    assert j <= node.getChildCount() + 1;
+                    children.add(children.remove(0));
+                }
+                informedNeighbor = (PQRNode) children.remove(0);
+                assert order.get(informedNeighbor) > order.get(node);
+            }
+
+            if (includeInnerNodeOrder) sb.append(order.get(node)).append(":");
+            if (node.getType() == PQRType.Q) {
+                sb.append("[");
+                stack.add("]");
+                if (node == fullNodeOrder.get(fullNodeOrder.size() - 1)) {
+                    Node minChild = Collections.min(children, Comparator.comparingInt(order::get));
+                    for (int j = 0; children.get(0) != minChild; j++) {
+                        assert j <= node.getChildCount() + 1;
+                        children.add(children.remove(0));
+                    }
+                    Node second = children.get(1);
+                    if (order.get(second) > order.get(children.get(children.size() - 1))) {
+                        children.add(children.remove(0));
+                        Collections.reverse(children);
+                    }
+                    second = children.get(1);
+                    assert (children.get(0) == minChild);
+                    assert (order.get(second) < order.get(children.get(children.size() - 1)));
+                } else {
+                    if (order.get(children.get(0)) > order.get(children.get(children.size() - 1))) {
+                        Collections.reverse(children);
+                    }
+                }
+            } else {
+                if (node.getType() == PQRType.R) {
+                    sb.append("XXX{");
+                    stack.add("}XXX");
+                } else if (degree <= 3) {
+                    sb.append("[");
+                    stack.add("]");
+                } else {
+                    sb.append("(");
+                    stack.add(")");
+                }
+                children.sort(Comparator.comparingInt(order::get));
+            }
+
+            //			assert (node == fullNodeOrder.get(fullNodeOrder.size() - 1)) == (lastLeaf.getParent() == node);
+            assert (order.get(children.get(0)) < order.get(children.get(children.size() - 1)));
+
+            boolean space = false;
+            for (Node child : children) {
+                if (space)
+                    stack.add(", ");
+                stack.add(child);
+                space = true;
+            }
+        }
+
+        return sb.toString();
+    }
+
+    public BigInteger getPossibleOrders() {
+        return root.getPossibleOrders(true);
+    }
+
+    public void mergeAndReplaceLeaves(int[] oldLeaves, int[] newLeaves) {
+        //		{
+        //			PQRNode parent = leaf.get(oldLeaves[0]).getParent();
+        //			System.out.println("replace " + Arrays.toString(oldLeaves) + " with " + Arrays.toString(newLeaves) + " on parent " + parent.getType() + " " + parent);
+        //		}
+        for (int i = 0; i < oldLeaves.length - 1; i++) {
+            Leaf l = leaf.get(oldLeaves[i]);
+            leaf.set(oldLeaves[i], null);
+            //			System.out.println("remove " + i + " = " + l.toString());
+            PQRNode p = l.getParent();
+            p.removeChild(l);
+            if (p.getChildCount() == 1) {
+                PQRNode pp = p.getParent();
+                //				System.out.println("flatten deg-1 " + p + " into " + pp);
+                pp.replaceChild(p, p.firstChild);
+                p.firstChild.parent = pp;
+                p.firstChild.representant = p.firstChild;
+                //				System.out.println("\t" + pp);
+                //			} else {
+                //				System.out.println("\t" + p);
+            }
+        }
+
+        Leaf remainingLeaf = leaf.get(oldLeaves[oldLeaves.length - 1]);
+        leaf.set(oldLeaves[oldLeaves.length - 1], null);
+        Node newNode;
+        if (newLeaves.length > 1) {
+            newNode = new PQRNode(PQRType.P);
+            for (int i : newLeaves) {
+                while (i >= leaf.size()) {
+                    leaf.add(null);
+                }
+                leaf.set(i, new Leaf(i));
+                ((PQRNode) newNode).insertEnd(leaf.get(i));
+            }
+        } else {
+            int i = newLeaves[0];
+            newNode = new Leaf(i);
+            while (i >= leaf.size()) {
+                leaf.add(null);
+            }
+            this.leaf.set(i, (Leaf) newNode);
+        }
+        PQRNode parent = remainingLeaf.getParent();
+        //		System.out.println("replace " + remainingLeaf + " => " + newNode + " in " + parent);
+        parent.replaceChild(remainingLeaf, newNode);
+        //		System.out.println("\t" + parent);
+
+        fixParent(parent, newNode);
+        visitedNodes.clear();
+    }
+
+    private void fixParent(PQRNode parent, Node newNode) {
+        while (parent.getType() == PQRType.Q || parent.getChildCount() == 1) {
+            if (parent.getChildCount() == 1) {
+                PQRNode newParent = parent.getParent();
+                //				System.out.println("flatten deg-1 " + parent + " into " + newParent);
+                newParent.replaceChild(parent, newNode);
+                parent = newParent;
+            } else if (parent.getChildCount() == 2) {
+                //				System.out.println("convert deg-2 " + parent + " into P");
+                parent.setType(PQRType.P);
+                parent.representativeChild = newNode;
+                newNode.parent = parent;
+                newNode.representant = newNode;
+                Node sib = newNode.sibling[0] != null ? newNode.sibling[0] : newNode.sibling[1];
+                sib.parent = parent;
+                sib.representant = newNode;
+            } else {
+                fixTree(parent, 0);
+                break;
+            }
+        }
+    }
+
+    void fixTree(PQRNode parent, int depth) {
+        parent.cleanUp();
+
+        Node pred = null;
+        Node curr = parent.firstChild;
+        int count = 0;
+        while (curr != null) {
+            if (parent.getType() == PQRType.P) {
+                curr.parent = parent;
+                curr.representant = curr;
+                curr.rank = 0;
+            } else {
+                curr.parent = null;
+                curr.representant = parent.firstChild;
+                curr.rank = 1;
+            }
+            if (curr instanceof PQRNode && depth > 0) {
+                fixTree((PQRNode) curr, depth - 1);
+            } else {
+                if (curr instanceof Leaf) {
+                    assert leaf.get(((Leaf) curr).value) == curr;
+                }
+                curr.cleanUp();
+            }
+            Node next = curr.sibling[0] == pred ? curr.sibling[1] : curr.sibling[0];
+            pred = curr;
+            curr = next;
+            count++;
+        }
+        assert pred == parent.lastChild;
+        assert count == parent.getChildCount();
+        if (parent.getType() == PQRType.Q) {
+            parent.firstChild.parent = parent;
+            parent.firstChild.rank = 0;
+            parent.representativeChild = parent.firstChild;
+        } else {
+            parent.representativeChild = null;
+        }
+    }
 }
-- 
2.35.1

