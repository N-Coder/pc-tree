From f44d223180bf3035fa5d75aee18b58471a508578 Mon Sep 17 00:00:00 2001
From: Simon Dominik Niko Fink <simon.fink@uni-passau.de>
Date: Sun, 27 Feb 2022 10:55:25 +0100
Subject: [PATCH 6/8] manual changes to creislePQ

---
 libraries/creislePQ/Leaf.cpp   |  2 +-
 libraries/creislePQ/Leaf.h     | 14 ++++--------
 libraries/creislePQ/Node.cpp   |  4 ++--
 libraries/creislePQ/Node.h     | 16 +++++--------
 libraries/creislePQ/PQTree.cpp | 41 +++++++++++++++++++++++++++++-----
 libraries/creislePQ/PQTree.h   | 21 ++++++++---------
 libraries/creislePQ/PQnode.cpp |  6 +----
 libraries/creislePQ/PQnode.h   | 19 +++++-----------
 8 files changed, 66 insertions(+), 57 deletions(-)

diff --git a/libraries/creislePQ/Leaf.cpp b/libraries/creislePQ/Leaf.cpp
index ed2b780..b13fba5 100644
--- a/libraries/creislePQ/Leaf.cpp
+++ b/libraries/creislePQ/Leaf.cpp
@@ -10,7 +10,7 @@ static int buildcount = 0;
 
 using std::cerr;
 using std::endl;
-
+using namespace creisle;
 
 Leaf::Leaf(Node *p, int v, std::list<Leaf *> &leaflist, int src /*-1*/)
     : Node() {
diff --git a/libraries/creislePQ/Leaf.h b/libraries/creislePQ/Leaf.h
index a0f0072..599fc85 100644
--- a/libraries/creislePQ/Leaf.h
+++ b/libraries/creislePQ/Leaf.h
@@ -1,12 +1,4 @@
-
-#ifndef __LEAF_H
-#define __LEAF_H
-
-//warning to ignore
-#pragma GCC diagnostic ignored "-Wpadded"
-#pragma GCC diagnostic ignored "-Wc++11-extensions"
-#pragma GCC diagnostic ignored "-Wc++98-compat"
-#pragma GCC diagnostic ignored "-Wc++98-compat-pedantic"
+#pragma once
 
 
 //dependencies
@@ -19,6 +11,8 @@ enum nodetype {pnode , qnode, leafnode};
 enum marking {empty, partial, full};
 */
 
+namespace creisle {
+
 class Leaf : public Node {
 private:
     int value;
@@ -48,4 +42,4 @@ public:
     int get_source();
 };
 
-#endif
+}
\ No newline at end of file
diff --git a/libraries/creislePQ/Node.cpp b/libraries/creislePQ/Node.cpp
index 88f1971..83881ef 100644
--- a/libraries/creislePQ/Node.cpp
+++ b/libraries/creislePQ/Node.cpp
@@ -4,7 +4,7 @@
 
 #include "Node.h"
 
-
+using namespace creisle;
 //this will be the parent class for P-nodes, C-nodes and Q-nodes
 //on the reduction step will ensure that we have a valid PQ tree
 Node::Node()//default constructor
@@ -46,7 +46,7 @@ marking Node::get_mark() const { return node_mark; }
 void Node::set_parent(Node *p) { parent = p; }
 
 //comparison to sort lists of marked nodes by marking so that they follow the form e...p...f
-bool compare_marking(Node *first, Node *second) {
+bool creisle::compare_marking(Node *first, Node *second) {
     marking a = first->get_mark();
     marking b = second->get_mark();
     if (a == b) {
diff --git a/libraries/creislePQ/Node.h b/libraries/creislePQ/Node.h
index 58c44d5..958c560 100644
--- a/libraries/creislePQ/Node.h
+++ b/libraries/creislePQ/Node.h
@@ -1,12 +1,4 @@
-
-#ifndef __NODE_H
-#define __NODE_H
-
-//warning to ignore
-#pragma GCC diagnostic ignored "-Wpadded"
-#pragma GCC diagnostic ignored "-Wc++11-extensions"
-#pragma GCC diagnostic ignored "-Wc++98-compat"
-#pragma GCC diagnostic ignored "-Wc++98-compat-pedantic"
+#pragma once
 
 //dependencies
 #include <cstdlib>
@@ -15,6 +7,8 @@
 #include <string>
 #include <vector>
 
+namespace creisle {
+
 enum nodetype { pnode,
                 qnode,
                 leafnode };
@@ -58,8 +52,8 @@ public:
 
 bool compare_marking(Node *, Node *);
 
+}
+
 namespace custom {
 bool contains(std::vector<int> vec, int v);
 };
-
-#endif
diff --git a/libraries/creislePQ/PQTree.cpp b/libraries/creislePQ/PQTree.cpp
index 4d9bd6a..abab255 100644
--- a/libraries/creislePQ/PQTree.cpp
+++ b/libraries/creislePQ/PQTree.cpp
@@ -10,10 +10,7 @@
  */
 
 #include "PQTree.h"
-
-//warning to ignore
-#pragma GCC diagnostic ignored "-Wpadded"
-#pragma GCC diagnostic ignored "-Wc++11-extensions"
+#include <queue>
 
 static bool follow = false;//use this to find bugs. prints out function names when a function is executed
 static bool debug = false;
@@ -25,6 +22,7 @@ static std::string string_marking[] = {"empty", "partial", "full"};
 using std::cerr;
 using std::cout;
 using std::endl;
+using namespace creisle;
 
 PQTree::PQTree() {
     if (leaks) { cerr << "PQTree++ " << ++buildcount << endl; }
@@ -156,12 +154,18 @@ PQnode *PQTree::reduce(std::vector<int> values) {
 bool PQTree::set_consecutive(std::vector<int> values) {
     if (follow) { printf("PQTree::set_consecutive(std::vector<int> values)\n"); }
     PQnode *subroot = reduce(values);
+    previousSubroot = subroot;
     if (subroot == NULL) { return false; }
 
-    subroot->unmark();
     return true;
 }
 
+void PQTree::cleanUp() {
+    if (previousSubroot != nullptr) {
+        previousSubroot->unmark();
+    }
+}
+
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * function: replace_full_with(Node *child)
  * input: a pointer to the child node we want to insert
@@ -475,3 +479,30 @@ std::string PQTree::convert_to_gml() {
     result += "]\n";
     return result;
 }
+
+Bigint PQTree::possibleOrders() {
+    Bigint orders(1);
+
+    std::queue<PQnode *> queue;
+    queue.push(root);
+
+    while (!queue.empty()) {
+        PQnode *nextNode = queue.front();
+        queue.pop();
+
+        if (nextNode->get_type() == pnode) {
+            int childCount = root == nextNode ? nextNode->children.size() - 1 : nextNode->children.size();
+            orders *= factorial(childCount);
+        } else if (nextNode->get_type() == qnode) {
+            orders *= 2;
+        }
+
+        for (Node *child : nextNode->children) {
+            if (child->get_type() != leafnode) {
+                queue.push(dynamic_cast<PQnode *>(child));
+            }
+        }
+    }
+
+    return orders;
+}
diff --git a/libraries/creislePQ/PQTree.h b/libraries/creislePQ/PQTree.h
index 769bd0b..3f10868 100644
--- a/libraries/creislePQ/PQTree.h
+++ b/libraries/creislePQ/PQTree.h
@@ -1,18 +1,14 @@
-
-#ifndef __PQTree_H
-#define __PQTree_H
-
-//warning to ignore
-#pragma GCC diagnostic ignored "-Wpadded"
-#pragma GCC diagnostic ignored "-Wc++11-extensions"
+#pragma once
 
 //dependencies
 #include "PQnode.h"
+#include "bigInt/bigint.h"
 
+namespace creisle {
+using namespace Dodecahedron;
 //forward dependencies
 class Node;
 
-
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * Class PQTree
  * purpose: implementation of booth and lueker's (1976) PQ tree
@@ -23,6 +19,7 @@ class Node;
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 class PQTree {
 private:
+    PQnode *previousSubroot = nullptr;
     int stage;//use in keeping track of printouts
     Leaf *special_leaf;
     PQnode *root;              //pointer to the root of the PQ tree
@@ -65,7 +62,11 @@ public:
 
     //comparing
     bool equivalent(PQTree &);
-};
 
+    Bigint possibleOrders();
+
+
+    void cleanUp();
+};
 
-#endif
+}
\ No newline at end of file
diff --git a/libraries/creislePQ/PQnode.cpp b/libraries/creislePQ/PQnode.cpp
index c92966a..dae4d4b 100644
--- a/libraries/creislePQ/PQnode.cpp
+++ b/libraries/creislePQ/PQnode.cpp
@@ -6,11 +6,6 @@
 
 #include "PQnode.h"
 
-//warning to ignore
-
-#pragma GCC diagnostic ignored "-Wpadded"
-#pragma GCC diagnostic ignored "-Wc++11-extensions"
-
 static bool follow = false;
 static bool debug = false;
 static int builtcount = 0;
@@ -18,6 +13,7 @@ static int builtcount = 0;
 using std::cerr;
 using std::cout;
 using std::endl;
+using namespace creisle;
 
 PQnode::PQnode()
     : Node() {
diff --git a/libraries/creislePQ/PQnode.h b/libraries/creislePQ/PQnode.h
index 6a0548e..0a64a09 100644
--- a/libraries/creislePQ/PQnode.h
+++ b/libraries/creislePQ/PQnode.h
@@ -1,12 +1,4 @@
-
-
-#ifndef __PQNode_H
-#define __PQNode_H
-
-//warning to ignore
-#pragma GCC diagnostic ignored "-Wpadded"
-#pragma GCC diagnostic ignored "-Wc++11-extensions"
-#pragma GCC diagnostic ignored "-Wc++98-compat"
+#pragma once
 
 //dependencies
 #include "Leaf.h"
@@ -19,9 +11,11 @@ enum print_option {option_none, option_marking, option_depth, option_src };
 enum nodetype {pnode , qnode, leafnode};
 enum marking {empty, partial, full};
 */
-
+namespace creisle {
 
 class PQnode : public Node {
+    friend class PQTree;
+
 private:
     std::list<Node *> children;//empty list of children
     bool flipped;
@@ -61,7 +55,7 @@ public:
     bool mark();
     void unmark();
     bool condense_and_replace(Node *, std::list<int> &);
-    bool link_child(Node *, direction_type dir = right);//DANGEROUS!
+    bool link_child(Node *, direction_type dir = direction_type::right);//DANGEROUS!
     void update_depth();
 
     //function for tree reduction
@@ -76,11 +70,10 @@ public:
     void print();
     std::string convert_to_gml(int &);
 };
+}
 
 namespace custom {
 void print(std::list<int>);
 void print(std::vector<int>);
 bool compare(std::string s1, std::string s2);
 };
-
-#endif
-- 
2.35.1

